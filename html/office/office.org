# -*- mode: org;  -*-
#+TITLE: Office-like Org-export Template
#+AUTHOR: Simon Johnston
#+EMAIL: johnstonskj@gmail.com
#+LANGUAGE: en
#+STARTUP: overview hidestars inlineimages entitiespretty
#+OPTIONS: num:t toc:2
#+SETUPFILE: https://simonkjohnston.life/org-export-themes/html/office/office.setup

This is a simple *ox-html* setup file that implements a clean, modern look and feel similar to that provided by a modern
word processor such as MS Word. The typography is intended to bridge screen and print without too many changes and
relies on the Fira Sans for text and Fira Code for pre-formatted and code content.

Generation of the files from this source is via the ~org-babel-tangle~ function, or =C-c C-v t=, which tangles all the code
blocks into corresponding CSS, JavaScript, and setup files.

#+BEGIN_COMMENT
To deploy:

1. Tangle to create the necessary deployment files; ~org-babel-tangle~ function, or =C-c C-v t=.
2. Org export to create documentation; ~org-export-dispatch~ and =c e h h=.
3. Stage and commit all changes.
4. Push changes, once they are merged into Github they are live for use.

#+END_COMMENT

* Overview of Generated HTML

#+CAPTION: Org-Exported File
#+BEGIN_SRC html :tangle no
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
  <head>...</head>
  <body>
    <div id="org-div-home-and-up">...</div>
    <div id="table-of-contents" role="doc-toc">
    <header>...</header>
    <nav  id="table-of-contents" role="doc-toc">...</nav>
    ...
    </div>
    <div id"postamble" class="status">...</div>
  </body>
</html>
#+END_SRC

* CSS
:PROPERTIES:
:header-args: :tangle office.css
:END:

All CSS content will be written to the file =office.css= which is referenced by the =office.setup= and =office-local.setup=
files.

** Typography

This block imports the two major fonts used in this theme. It also sets up variables for the specific weights and their
mapping to their usage.

#+BEGIN_SRC css
@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@300;400;600&family=Fira+Sans:ital,wght@0,100;0,200;0,400;0,600;0,700;1,100;1,200;1,400;1,600;1,700&display=swap');
:root {
    --code-font-family: 'Fira Code', monospace;
    --code-weight-normal: 300;
    --code-weight-semibold: 400;
    --code-weight-bold: 600;

    --text-font-family: 'Fira Sans', 'Helvetica Neue', Arial, sans-serif;
    --text-weight-light: 100;
    --text-weight-normal: 200;
    --text-weight-heading: 400;
    --text-weight-bold: 600;
    --text-weight-heavy: 700;
}
#+END_SRC

This block is included to setup font features globally.

#+BEGIN_SRC css
html {
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
    font-kerning: normal;
    font-size: 100%;
    height: 100%;
}
#+END_SRC

*** Colors

These are the base colors used throughout; local names introduced in sections below should shadow these values not add
additional colors without *really good* reasons.

#+BEGIN_SRC css
:root {
    --text-color: #002b36;
    --title-color: #365F91;
    --subtitle-color: #808080;
    --heading-color: #4F81BD;
    --border-color: #586e75;
    
    --: var(--text-color);
    --code-background-color: #eee8d5;
    --code-light-background-color: #fdf6e3;
    --code-border-color: #93a1a1;
}
#+END_SRC

#+BEGIN_SRC css
:root {
    --print-text-color: black;
    
    --print-code-color: var(--print-text-color);
    --print-code-background-color: white;
    --print-code-light-background-color: var(--print-code-background-color);
}
#+END_SRC

#+BEGIN_SRC css
:root {
    --info-block-color: var(--heading-color);
    --success-block-color: #2aa198;
    --warning-block-color: #b58900;
    --error-block-color: #dc322f;
}
#+END_SRC


*** <<sec:relative-sizes>>Relative Sizes

These may be used not only for font sizing but for margins and padding also.

#+BEGIN_SRC css
:root {
    --text-normal: 1.0em;
    --text-small: 0.8em;
    --text-smaller: 0.6em;
    --text-tiny: 0.4em;
    --text-large: 1.6em;
    --text-larger: 2.4em;
    --text-huge: 3.2em;

    --line-height-none: 0;
    --line-height-normal: 1.6em;
    --line-height-code: 1.4em;
    --line-height-compressed: 1.2em;
    --line-extension-normal: 0.6em;
    --line-extension-code: 0.4em;
    --line-extension-compressed: 0.2em;
}
#+END_SRC

*** Body Content

#+BEGIN_SRC css
body {
    color: var(--text-color);
    font-family: var(--text-font-family);
    font-weight: var(--text-weight-normal);
    line-height: var(--line-height-normal);
}
#+END_SRC

#+BEGIN_SRC css
p, li, dd {
    text-align: justify;
}
#+END_SRC

*** Text Styles

Set what it means to be bold.

#+BEGIN_SRC css
b, strong {
    font-weight: var(--text-weight-bold);
}
#+END_SRC

*** Headings

#+CAPTION: Org-Exported Header
#+BEGIN_SRC html :tangle no
<header>
  <h1 class="title">
    ...
    <span class="subtitle">...</span>
  </h1>
</header>
#+END_SRC

The front-page title should be rather larger than normal.

#+BEGIN_SRC css
header > h1.title {
    color: var(--title-color);
    font-size: var(--text-larger);
    font-weight: var(--text-weight-heading);
    text-align: center;
}
#+END_SRC

Although the embedded subtitle should appear diminished.
#+BEGIN_SRC css
header > p.subtitle {
    color: var(--subtitle-color);
    font-size: var(--text-large);
    font-weight: var(--text-weight-heading);
    text-align: center;
}
#+END_SRC

The rest of the headings should share common colors and weight only.

#+BEGIN_SRC css
h1, h2, h3, h4, h5 {
    color: var(--heading-color);
    font-weight: var(--text-weight-heading);
}
#+END_SRC

*** Captions

As these properties are used to construct code, figure/image, and table captions it's worth naming them specifically.

#+BEGIN_SRC css
:root {
    --caption-font-size: var(--text-small);
    --caption-font-style: italic;
    --caption-font-weight: var(--text-weight-light);
}
#+END_SRC

*** Borders and Rules

These are some simple reusable values across table and block borders as well as ~<hr>~ elements.

#+BEGIN_SRC css
:root {
    --border-width: 1px;
    --border-width-thick: 2px;
    --border-width-block: 0.25em;
    --border-radius-small: 3px;
    --border-radius-normal: 0.25em;
    --border-style: solid;
    --table-border: var(--border-width) var(--border-style) var(--border-color);
    --section-border: var(--border-width) var(--border-style) var(--border-color);
}
#+END_SRC

*** Keyboard elements

Keyboard elements are wrapped in the =kbd= tag, and represent pressed keys, as in the following,

#+BEGIN_EXAMPLE html
<kbd>SPC</kbd>
#+END_EXAMPLE

or as a sequence of key presses together, as in the following.

#+BEGIN_EXAMPLE html
<kbd><kbd>Ctrl</kbd><kbd>+</kbd><kbd>SPC</kbd></kbd>
#+END_EXAMPLE

The sequence consists of an outer, /compound/, element which should really have no formatting of it's own, but contains
the set of formatted individual keys.

The rule in the CSS below ignores any =<kbd>= with nested =<kbd>= elements, only applying the /key shape/ to the individual
key elements. The key shape uses the code colors as well as providing a drop shadow on the bottom and a subtle light
inset within the border.

#+BEGIN_SRC css
:root {
    --kbd-line-height: 1.8em;
    --kbd-spacing-none: 0;      /* top and bottom */
    --kbd-spacing-between: 0.2em; /* between individuals */
    --kbd-spacing-some: 0.5em; /* left and right */
    --kbd-box-shadow: 0 0.15em 0 var(--code-border-color);
    --kbd-box-inset: 0 0 0 0.03em var(--code-light-background-color);
}

kbd {
    font-family: var(--code-font-family);
    font-weight: var(--code-weight-normal);
    color: var(--code-color);
}

kbd:not(:has(kbd)) {
    font-size: var(--text-smaller);
    line-height: var(--kbd-line-height);
    background-color: var(--code-background-color);
    display: inline-block;
    padding: var(--kbd-spacing-none) var(--kbd-spacing-some);
    border: var(--border-width) var(--border-style) var(--border-color);
    border-radius: var(--border-radius-normal);
    box-shadow: var(--kbd-box-shadow), inset var(--kbd-box-inset);
    vertical-align: text-bottom;
}

kbd > kbd:not(:first-child) {
    margin-left: var(--kbd-spacing-between);
}

kbd > span.cmd {
    font-size: var(--text-smaller);
    line-height: var(--kbd-line-height);
    margin-left: var(--kbd-spacing-between);
    vertical-align: text-bottom;
}
#+END_SRC

The following classes when applied to the =kbd= element will set the correct/common glyph for that key action. Note that
some will list alternative glyphs, this is useful where the correct glyph does not have broad font support but a
similar, or acceptable, alternative exists.

*Movement Keys*

#+BEGIN_SRC css
/* common, OS-agnostic, key names */
kbd.arrow-up::before {
    /* U+2191: Upwards Arrow ↑ */
    content: "\2191 ";
}
kbd.text-arrow-up::after {
    content: " Up";
}
kbd.arrow-down::before {
    /* U+2193: Downwards Arrow ↓ */
    content: "\2193 ";
}
kbd.text-arrow-down::after {
    content: " Down";
}
kbd.arrow-left::before {
    /* U+2190: Leftwards Arrow ← */
    content: "\2190 ";
}
kbd.text-arrow-left::after {
    content: " Left";
}
kbd.arrow-right::before {
    /* U+2192: Rightwards Arrow → */
    content: "\2192 ";
}
kbd.text-arrow-right::after {
    content: " Right";
}
kbd.page-up::before {
    /* U+21DE: Upwards Arrow with Double Stroke ⇞ */
    content: "\21DE ";
}
kbd.text-page-up::after {
    content: " Pg Up";
}
kbd.page-down::before {
    /* U+21DF: Downwards Arrow with Double Stroke ⇟ */
    content: "\21DF ";
}
kbd.text-page-down::after {
    content: " Pg Dn";
}
kbd.home::before {
    /* U+2196: North West Arrow ↖ */
    /* U+2B76: North West Triangle-Headed Arrow To Bar ⭶ [ official standard ] */
    content: "\2196 ";
}
kbd.text-home::after {
    content: " Home";
}
kbd.mac-home::before {
    /* U+2912: Upwards Arrow To Bar ⤒ */
    content: "\2912 ";
}
kbd.end::before {
    /* &U+2198: South East Arrow Emoji ↘ */
    /* U+2B78: South East Triangle-Headed Arrow To Bar ⭸ [ official standard ] */
    content: "\2198 ";
}
kbd.text-end::after {
    content: " End";
}
kbd.mac-end::before {
    /* U+2913: Downwards Arrow To Bar ⤒ */
    content: "\2913 ";
}
#+END_SRC

*Modifier Keys*

#+BEGIN_SRC css
kbd.shift::before {
    /* U+21E7: Upwards White Arrow ⇧ */
    content: "\21E7 ";
}
kbd.text-shift::after {
    content: " Shift";
}
kbd.caps-lock::before {
    /* U+21EA: Upwards White Arrow from Bar ⇪ */
    content: "\21EA ";
}
kbd.text-caps-lock::after {
    content: " Caps Lock";
}
kbd.control::before {
    /* U+2303: Up Arrowhead ⌃ */
    content: "\2303 ";
}
kbd.text-control::after {
    content: " Ctrl";
}
kbd.alt::before {
    /* U+2387: Alternative Key Symbol ⎇ */
    content: "\2387 ";
}
kbd.text-alt::after {
    content: " Alt";
}
kbd.insert::before {
    /* U+2380: Insertion Symbol ⎀ */
    content: "\2380 ";
}
kbd.text-insert::after {
    content: " Insert";
}
kbd.num-lock::before {
    /* U+21ED: Upwards White Arrow On Pedestal with Vertical Bar ⇭ */
    content: "\21ED ";
}
kbd.text-num-lock::after {
    content: " Num Lock";
}
kbd.text-scroll-lock::after {
    content: " Scroll Lock";
}
kbd.text-alt-graph::after {
    content: " AltGr";
}
kbd.text-print-screen::after {
    content: " Prt Sc";
}
kbd.text-function::after {
    content: " Fn";
}
#+END_SRC

*Text Keys*

#+BEGIN_SRC css
kbd.space::before {
    /* U+2423: Open Box ␣ */
    content: "\2423 ";
}
kbd.text-space::after {
    content: " Space";
}
kbd.tab::before {
    /* U+21B9: Leftwards Arrow To Bar Over Rightwards Arrow To Bar ↹ */
    /* U+2B7E: Horizontal Tab Key ⭾ */
    content: "\21B9 ";
}
kbd.text-tab::after {
    content: " Tab";
}
kbd.tab-right::before {
    /* U+21E5: Rightwards Arrow To Bar ⇥ */
    content: "\21E5 ";
}
kbd.text-tab-right::after {
    content: " Tab Right";
}
kbd.tab-left::before {
    /* U+21E4: Leftwards Arrow To Bar ⇤ */
    content: "\21E4 ";
}
kbd.text-tab-left::after {
    content: "Tab Left";
}
kbd.backspace::before {
    /* U+2190: Leftwards Arrow ← */
    content: "\2190 ";
}
kbd.text-backspace::after {
    content: " Backspace";
}
kbd.mac > kbd.backspace::before {
    /* U+232B: Erase To the Left ⌫ */
    content: "\232B ";
}
kbd.mac > kbd.text-backspace::after {
    content: " Back Space";
}
kbd.delete::before {
    /* U+2326: Erase To the Right ⌦ */
    content: "\2326 ";
}
kbd.text-delete::after {
    content: " Delete";
}
kbd.enter::before {
    /* U+2386: Enter Symbol ⎆ [official standard] */
    /* U+21B5: Downwards Arrow with Corner Leftwards ↵ */
    content: "\21B5 ";
}
kbd.text-enter::after {
    content: " Enter";
}
kbd.mac > kbd.enter::before {
    /* U+2305: Projective ⌅ */
    content: "\2305 ";
}
kbd.mac > kbd.text-enter::after {
    content: " enter";
    font-weight: bold;
}
kbd.return::before {
    /* U+23CE: Return Symbol ⏎ [official standard] */
    content: "\23CE ";
}
kbd.text-return::after {
    content: " Return";
}
kbd.win > kbd.return::before {
    /* U+21B5: Downwards Arrow with Corner Leftwards ↵ */
    content: "\21B5 ";
}
#+END_SRC

*Odd Keys*

#+BEGIN_SRC css
kbd.escape::before {
    /* U+238B: Broken Circle with Northwest Arrow ⎋ */
    content: "\238B ";
}
kbd.text-escape::after {
    content: " Esc";
}
kbd.undo::before {
    /* U+21B6: Anticlockwise Top Semicircle Arrow ↶ */
    /* U+238C: Undo Symbol ⎌ */
    content: "\238C ";
}
kbd.text-undo::after {
    content: " Undo";
}
kbd.redo::before {
    /* U+21B7: Clockwise Top Semicircle Arrow ↶ */
    content: "\21B7 ";
}
kbd.text-redo::after {
    content: " Redo";
}
kbd.break::before {
    /* U+238A: Circled Triangle Down ⎊ */
    content: "\238A ";
}
kbd.text-break::after {
    content: " Break";
}
kbd.power::before {
    /* U+23FC: Power On-Off Symbol ⏼ */
    /* U+23FB: Power Symbol ⏻ */
    content: "\23FB ";
}
kbd.text-power::after {
    content: " Power";
}
kbd.sleep::before {
    /* U+23FE: Power Sleep Symbol ⏾ */
    content: "\23FE ";
}
kbd.text-sleep::after {
    content: " Sleep";
}
#+END_SRC

*O/S Keys - Windows*

#+BEGIN_SRC css
kbd.win > kbd.windows::before {
    /* :U+229E: Squared Plus ⊞ */
   content: "\229E ";
}
kbd.win > kbd.text-windows::after {
   content: " Win";
}
kbd.win > kbd.menu::before {
    /* U+2261: Identical To ≡ */
    /* U+2630: Trigram for Heaven ☰ */
   content: "\2630 ";
}
kbd.win > kbd.text-menu::after {
   content: " Menu";
}
#+END_SRC

*O/S Keys - macos*

#+BEGIN_SRC css
kbd.mac > kbd.option:before {
    /* U+2325: Option Key ⌥ */
    content: "\2325 ";
}
kbd.mac > kbd.text-option::after {
    content: " Option";
}
kbd.mac > kbd.command::before {
    /* U+2318: Place of Interest Sign ⌘ */
    content: "\2318 ";
}
kbd.mac > kbd.text-command::after {
    content: " Cmd";
}
kbd.mac > kbd.globe::before {
    /* U+1F310: Globe with Meridians Emoji 🌐 */
    content: "\1F310 ";
}
#+END_SRC

*O/S Keys - Legacy*

#+BEGIN_SRC css
kbd.legacy > kbd.meta::before {
    /* U+25C6: Black Diamond ◆ */
    content: "\25C6 ";
}
kbd.legacy > kbd.text-meta::after {
    content: " Meta";
}
kbd.legacy > kbd.super::before {
    /* U+2756: Black Diamond Minus White X ❖ */
    content: "\2756 ";
}
kbd.legacy > kbd.text-super::after {
    content: " Super";
}
kbd.legacy > kbd.hyper::before {
    /* U+2727: White Four Pointed Star ✧ */
    /* U+2726: Black Four Pointed Star ✦ */
    content: "\2726 ";
}
kbd.legacy > kbd.text-hyper::after {
    content: " Hyper";
}
kbd.legacy > kbd.control::before {
    /* U+2388: Helm Symbol ⎈ */
    content: "\2388 ";
}
kbd.win.legacy > kbd.control::before {
    /* U+2732: Open Centre Asterisk ✲ */
   content: "\2732 ";
}
#+END_SRC

*Emacs - Because*

#+BEGIN_SRC css
kbd.emacs > kbd.text-arrow-up::after {
    content: " [up key]";
}
kbd.emacs > kbd.text-arrow-down::after {
    content: " [down key]";
}
kbd.emacs > kbd.text-arrow-left::after {
    content: " [left key]";
}
kbd.emacs > kbd.text-arrow-right::after {
    content: " [right key]";
}
kbd.emacs > kbd.text-space::after {
    content: " SPC"
}
kbd.emacs > kbd.text-shift::after {
    content: " S-"
}
kbd.emacs > kbd.text-control::after {
    content: " C-";
}
kbd.emacs > kbd.text-alt::after {
    content: " A-";
}
kbd.emacs > kbd.text-meta::after {
    content: " M-";
}
kbd.emacs > kbd.text-return::after {
    content: " RET";
}
kbd.emacs > kbd.text-backspace::after {
    content: " BS";
}
kbd.emacs > kbd.text-delete::after {
    content: " DEL";
}
kbd.emacs > kbd.text-escape::after {
    content: " ESC";
}
#+END_SRC

** Media Queries

*** Screen

#+BEGIN_SRC css
@media screen {
    :root {
        --root-font-size-small: 14px;
        --root-font-size-normal: 16px;
        --root-font-size-large: 18px;
        --abstract-margin: calc(var(--text-huge) * 2);;
    }
}
#+END_SRC

#+BEGIN_SRC css
body {
    min-height: 100%;
    padding-left: var(--text-large);
    padding-right: var(--text-large)
}
h1.title {
    margin-top: var(--text-normal);
    margin-bottom: var(--text-smaller);
}
#+END_SRC

For mobile devices.

#+BEGIN_SRC css
@media screen and (min-width: 320px) and (max-width: 480px) {
    body {
        font-size: var(--root-font-size-small);
    }
    div#content {
        margin-left: auto;
        margin-right: auto;
        min-width: 21em;
        max-width: 30em;
    }
    img {
        max-width: 420px;
        height: auto;
    }
}
#+END_SRC

For common tablet devices.

#+BEGIN_SRC css
@media screen and (min-width: 481px) and (max-width: 768px)  {
    body {
        font-size: var(--root-font-size-small);
    }
    div#content {
        margin-left: auto;
        margin-right: auto;
        min-width: 30em;
        max-width: 48em;
    }
    img {
        max-width: 640px;
        height: auto;
    }
}
#+END_SRC

For small laptop or large tablet devices.

#+BEGIN_SRC css
@media screen and (min-width: 769px) and (max-width: 1024px)  {
    body {
        font-size: var(--root-font-size-normal);
    }
    div#content {
        margin-left: auto;
        margin-right: auto;
        min-width: 28em;
        max-width: 58em;
    }
    img {
        max-width: 100%;
        height: auto;
    }
}
#+END_SRC

For large laptop or desktop devices.

#+BEGIN_SRC css
@media screen and (min-width: 1025px) and (max-width: 2048px) {
    body {
        font-size: var(--root-font-size-large);
    }
    div#content {
        margin-left: auto;
        margin-right: auto;
		  min-width: 52em;
        max-width: 68em;
    }
    img {
        max-width: 100%;
        height: auto;
    }
}
#+END_SRC

For large displays.

#+BEGIN_SRC css
@media screen and (min-width: 2049px) {
    body {
        font-size: var(--root-font-size-large);
    }
    div#content {
        margin-left: auto;
        margin-right: auto;
        min-width: 68em;
        max-width: 72em;
    }
    img {
        max-width: 100%;
        height: auto;
    }
}
#+END_SRC

*** Print

#+BEGIN_SRC css
@media print {
    :root {
        --root-font-size-small: 12px;
        --root-font-size-normal: 14px;
        --root-font-size-large: 16px;
        --print-margin-inner: 4cm;
        --print-margin-outer: 2cm;
        --print-margin-top: var(--print-margin-outer);
        --print-margin-bottom: var(--print-margin-inner);
        --print-margin-equal: calc((var(--print-margin-outer) + var(--print-margin-inner)) / 2);
        --abstract-margin: var(--text-huge)
    }
}
#+END_SRC

#+BEGIN_SRC css
@media print {
    body {
        color: var(--print-text-color) !important;
        font-size: var(--root-font-size-normal) !important;
        padding: 0 !important;
    }
    body.small-print {
        font-size: var(--root-font-size-small) !important;
        padding: 0 !important;
    }
    body.large-print {
        font-size: var(--root-font-size-large) !important;
        padding: 0 !important;
    }
    header > h1.title {
        margin-top: var(--text-huge);
        margin-bottom: var(--text-small);
    }
    header > p.subtitle {
        margin-top: var(--line-height-none);
        margin-bottom: var(--text-larger);
    }
    div#org-div-home-and-up {
        display: none;
    }
    nav#table-of-contents {
        display: none;
    }
    img {
        max-width: 100%;
        height: auto;
    }
    div#content {
        margin: auto;
    }
}
#+END_SRC

#+BEGIN_SRC css
@media print {
    h1.title { 
        string-set: doctitle content(); 
    }
    header, div.figure, td, th {
        page-break-inside: avoid;
    } 
    @page {
        size: letter portrait;
        margin-top:var(--print-margin-top);
        margin-bottom: var(--print-margin-equal);
    }
    @page :first {
        margin-left: var(--print-margin-equal);
        margin-right: var(--print-margin-equal);
    }
    @page :left {
        margin-left: var(--print-margin-outer);
        margin-right: var(--print-margin-inner);
        @bottom-left {
            content: counter(page);
        }
        @top-left {
            content: string(doctitle);
        }
    }
    @page :right {
        margin-left: var(--print-margin-inner);
        margin-right: var(--print-margin-outer);
        @bottom-right {
            content: counter(page);
        }
        @top-right {
            content: string(doctitle);
        }
    }
}
#+END_SRC

See also:

- https://www.w3.org/TR/css-page-3/#margin-boxes
- https://www.smashingmagazine.com/2015/01/designing-for-print-with-css/
- https://printcss.net/articles/page-margin-boxes
- https://printcss.net/articles/running-headers-and-footers
- https://pagedjs.org/documentation/

** Lists

*** Ordered (Numbered) Lists

Org-export applies the CSS class =org-ol=.

#+BEGIN_SRC css
ol li:last-child {
    margin-bottom: var(--text-small);
}
#+END_SRC

*** Unordered (Bulleted) Lists

Org-export applies the CSS class =org-ul=.

#+BEGIN_SRC css
ul li:last-child {
    margin-bottom: var(--text-small);
}
#+END_SRC

*** Definition Lists

Org-export applies the CSS class =org-dl=.

#+BEGIN_SRC css
:root {
    --dl-term-width-normal: 8em;
    --dl-term-width-wide: calc(var(--dl-term-width-normal) * 2);

    --dl-padding-normal: var(--text-normal);
}
#+END_SRC

Set the outer src_html[:exports code]{<dl>} to use a grid layout, this allows easy setup of a one-row per definition
layout. While the CSS attribute is actually =gap= here we use a /padding/ variable as it seems more generic.

#+BEGIN_SRC css
dl.org-dl {
    display: grid;
    grid-template-columns: max-content auto;
    gap: var(--dl-padding-normal);
}
#+END_SRC

Highlight the definition text, allowing for the CSS class =wide= to override the default width for more term and
less definition space.

#+BEGIN_SRC css
dl.org-dl > dt {
    grid-column-start: 1;
    font-weight: var(--code-weight-semibold);
    text-align: left;
    width: var(--dl-term-width-normal);
}
dl.org-dl.wide > dt {
    width: var(--dl-term-width-wide);
}
#+END_SRC

#+BEGIN_SRC css
dl.org-dl > dd {
    grid-column-start: 2;
    margin-left: 0;
}
#+END_SRC

** Blocks

*** Abstract

#+BEGIN_SRC css
div.abstract, div.ABSTRACT {
    font-size: var(--text-small);
    margin-top: var(--text-huge);
    margin-left: var(--abstract-margin);
    margin-right: var(--abstract-margin);
    margin-bottom: var(--text-large);
}

div.abstract > p::before, div.ABSTRACT > p::before {
    content: "Abstract: ";
    font-weight: var(--text-weight-heading);
}
#+END_SRC

*** Table of Contents

#+CAPTION: Org-Exported TOC
#+BEGIN_SRC html :tangle no
<nav id="table-of-contents" role="doc-toc">
  <h2>Table of Contents</h2>
  <div id="text-table-of-contents" role="doc-toc">
    <ul>
      <li><a href="#org289a925">1. Basic Terms</a>
        <ul>
          <li><a href="#org98111a5">1.1. Data Model</a></li>
        </ul>
      </li>
      <li><a href="#org7bc4e5f">2. Collection Resources</a></li>
    </ul>
  </div>
</nav>
#+END_SRC

#+BEGIN_SRC css
nav#table-of-contents > div#text-table-of-contents ul {
    list-style-type: none;
    margin-left: var(--text-normal);
    padding: 0;
}
#+END_SRC

*** Block Quotes

This section sets up the basics of a block quote with a simple margin all around but a larger padding left and right.
This padding allows us later to adjust this in favor of other uses of the margin.

#+BEGIN_SRC css
blockquote {
    display: block;
    margin: var(--text-normal);
    padding-left: var(--text-larger);
    padding-right: var(--text-larger);
    border: 0;
}

:root {
    --blockquote-leader-linespan: 2;
    --blockquote-decoration-color: var(--subtitle-color);
    --blockquote-border-color-dark: var(--heading-color);
    --blockquote-border-color-light: color-mix(in srgb, var(--blockquote-border-color-dark) 10%, white);
}
#+END_SRC

A /quoted/ block will have it's text in italic, with a stylized open and close quote at the beginning and end.
To enable this, use =#+ATTR_HTML: :class quoted=.

#+BEGIN_SRC css
blockquote.quoted p {
     font-style: italic;
}
blockquote.quoted p:first-child:before {
    content: open-quote;
    font-weight: var(--text-weight-bold);
    font-size: var(--text-large);
    color: var(--blockquote-decoration-color);
}
blockquote.quoted p:last-child:after {
    content: close-quote;
    font-weight: var(--text-weight-bold);
    font-size: var(--text-large);
    color: var(--blockquote-decoration-color);
}
#+END_SRC

A /leader/ block has the initial character of the first paragraph turned into a drop character spanning two lines.
To enable this, use =#+ATTR_HTML: :class leader=.

#+BEGIN_SRC css
blockquote.leader p:first-child:first-letter {
    initial-letter: var(--blockquote-leader-linespan);
    color: var(--blockquote-decoration-color);
}
#+END_SRC

An /edged/ block has a solid left border that clearly delineates the indented nature of the block and causes it to stand
out from surrounding text.
To enable this, use =#+ATTR_HTML: :class edged=.

#+BEGIN_SRC css
blockquote.edged  {
    margin-left: 0;
    border-left-width: var(--text-normal);
    border-left-style: solid;
    border-left-color: var(--blockquote-border-color-light);
}
#+END_SRC

*** Notes

A note block denotes a call-out inline in the text.

#+BEGIN_EXAMPLE org :eval:never
Here is an example note block in some org-mode document:

,#+BEGIN_NOTE
Some text I want to appear as a note with a nice margin around it.
,#+END_NOTE
#+END_EXAMPLE

#+BEGIN_SRC css
div.NOTE, div.INFO, div.WARNING, div.ERROR, div.SUCCESS, div.FAILURE {
    display: block;
    margin: var(--text-normal);
    padding: var(--text-normal);
    border: var(--border-width-thick) var(--border-style) var(--info-block-color);
    border-radius: var(--border-radius-normal);
}

div.NOTE p {
    margin-block-start: 0;
    margin-block-end: 0;
}

div.NOTE p:first-child:before {
    content: "\261E   NOTE  ";
    color: var(--info-block-color);
    font-weight: var(--text-weight-heading);
}
#+END_SRC

| Block Style | Border/Heading Color  | Icon | CSS Code |
|-------------+-----------------------+------+----------|
| NOTE        | =--info-block-color=    | ☞    | (=\261E=)  |
| INFO        | =--info-block-color=    | ℹ    | (=\2139=)  |
| WARNING     | =--warning-block-color= | ⚠    | (=\26A0=)  |
| ERROR       | =--error-block-color=   | ⨷    | (=\2A37=)  |
| SUCCESS     | =--success-block-color= | ✓    | (=\2713=)  |
| FAILURE     | =--error-block-color=   | ✗    | (=\2717=)  |

#+BEGIN_SRC css
div.INFO p {
    margin-block-start: 0;
    margin-block-end: 0;
}

div.INFO p:first-child:before {
    content: "\2139   INFO  ";
    color: var(--info-block-color);
    font-weight: var(--text-weight-heading);
}
#+END_SRC

#+BEGIN_SRC css
div.WARNING {
    border-color: var(--warning-block-color);
}

div.WARNING p {
    margin-block-start: 0;
    margin-block-end: 0;
}

div.WARNING p:first-child:before {
    content: "\26A0   WARNING  ";
    color: var(--warning-block-color);
    font-weight: var(--text-weight-heading);
}
#+END_SRC

#+BEGIN_SRC css
div.ERROR {
    border-color: var(--error-block-color);
}

div.ERROR p {
    margin-block-start: 0;
    margin-block-end: 0;
}

div.ERROR p:first-child:before {
    content: "\2A37   ERROR  ";
    color: var(--error-block-color);
    font-weight: var(--text-weight-heading);
}
#+END_SRC

#+BEGIN_SRC css
div.SUCCESS {
    border-color: var(--success-block-color);
}

div.SUCCESS p {
    margin-block-start: 0;
    margin-block-end: 0;
}

div.SUCCESS p:first-child:before {
    content: "\2713   SUCCESS  ";
    color: var(--success-block-color);
    font-weight: var(--text-weight-heading);
}
#+END_SRC

#+BEGIN_SRC css
div.FAILURE {
    border-color: var(--error-block-color);
}

div.FAILURE p {
    margin-block-start: 0;
    margin-block-end: 0;
}

div.FAILURE p:first-child:before {
    content: "\2717   FAILURE  ";
    color: var(--error-block-color);
    font-weight: var(--text-weight-heading);
}
#+END_SRC

** Images

Org-mode images are output by the HTML exporter according to the layout in the example shown below.

#+CAPTION: Org-Exported Figure
#+BEGIN_SRC html :tangle no
<figure id="org559bb8e">
  <img src="amethyst-ia.svg" alt="amethyst-ia.svg" class="org-svg">
  <figcaption>
    <span class="figure-number">Figure 1: </span>Amethyst Information Architecture
  </figcaption>
</figure>
#+END_SRC

First, we want all elements of the figure to be centered.

#+BEGIN_SRC css
figure {
    text-align: center;
    break-inside: avoid;
}
#+END_SRC

Setup the text style of the caption.

#+BEGIN_SRC css
figure > figcaption {
    font-size: var(--caption-font-size);
    font-style: var(--caption-font-style);
    font-weight: var(--caption-font-weight);
}
#+END_SRC

Bring the image and caption closer together.

#+BEGIN_SRC css
figure > img {
    margin-bottom: var(--text-tiny);
}
figure > figcaption {
    margin-top: 0;
}
#+END_SRC

** Tables

Org-mode tables are output by the HTML exporter according to the layout in the example shown below.

#+CAPTION: Org-Exported Table
#+BEGIN_SRC html :tangle no
<table border="0" cellspacing="0" cellpadding="6" rules="none" frame="none">
  <caption class="t-above">
    <span class="table-number">Table 2:</span> Some Table</caption>
  <colgroup>
    <col class="org-left">
    <col class="org-left">
  </colgroup>
  <thead>
    <tr>
      <th scope="col" class="org-left">Key</th>
      <th scope="col" class="org-left">Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="org-left">key-1</td>
      <td class="org-left">value-1</td>
    </tr>
  </tbody>
</table>
#+END_SRC

Unlike the default exporter, and LaTeX style, /and/ general readability guidance, we put borders back on tables. It is
also generally useful to reduce the size of the font in tables.

#+BEGIN_SRC css
table {
    border: var(--table-border);
    border-collapse: collapse;
    margin-left: auto;
    margin-right: auto;
    min-width: 50%;
    font-size: var(--text-small);
    line-height: var(--line-height-compressed);
    break-inside: avoid; 
}

table > thead {
    color: var(--heading-color);
    font-weight: var(--text-weight-heading);
}

table > thead th,
table > tbody td {
    padding-top: var(--text-tiny);
    padding-left: var(--text-smaller);
    padding-bottom: calc(var(--text-tiny) * 0.5);
    padding-right: var(--text-smaller);
    border: var(--table-border);
}
#+END_SRC

These classes are useful as hints to set column alignment.

#+BEGIN_SRC css
table > thead th.org-left,
table > tbody td.org-left {
    text-align: left;
}
table > thead th.org-center,
table > tbody td.org-center {
    text-align: center;
}
table > thead th.org-right,
table > tbody td.org-right {
    text-align: right;
}
#+END_SRC

Setup the caption for a table, this is a common set of properties for all captions.

#+BEGIN_SRC css
table caption {
    font-size: var(--caption-font-size);
    font-style: var(--caption-font-style);
    font-weight: var(--caption-font-weight);
}
#+END_SRC

** Code

Org-Export generates code of the following form. Note that it does not, as is more common, use a ~<code>~ element within
the ~<pre>~. The class ~src~ is common to all source blocks and any language specified on the source block generates a class
name of the form =src-{name}=.

#+BEGIN_SRC html :tangle no
<div class="org-src-container">
  <label class="org-src-name">
    <span class="listing-number">Listing 2: </span>Directory-Local Variables
  </label>
  <pre class="src src-elisp"> 
    <span style="color: #657b83;">(</span><span style="color: #657b83;">)</span>
  </pre>
</div>
#+END_SRC

#+BEGIN_SRC css
pre, code {
    color: var(--code-color);
    font-family: var(--code-font-family);
    font-size: var(--text-small);
    font-weight: var(--code-weight-normal);
    line-height: var(--line-height-code);
}
#+END_SRC

#+BEGIN_SRC css
div.org-src-container {
    break-inside: avoid;
}
#+END_SRC

#+BEGIN_SRC css
div.org-src-container > pre.src {
    margin-top: var(--text-tiny);
    padding: var(--text-normal);
    background-color: var(--code-background-color);
    border: var(--border-width) var(--border-style) var(--code-border-color);
    border-radius: var(--border-radius-small);
    overflow-x: hidden;
}
div.org-src-container > pre.src:hover {
    background-color: var(--code-light-background-color);
}
#+END_SRC

#+BEGIN_SRC css
div.org-src-container > pre.src.scroll {
    overflow-x: scroll;
}
#+END_SRC

#+BEGIN_SRC css
p code, li code, dt code, dd code {
    background-color: var(--code-background-color);
    padding-left: var(--line-extension-compressed);
    padding-right: var(--line-extension-compressed);
}
#+END_SRC
    
#+BEGIN_SRC css
div.org-src-container > label.org-src-name {
    font-size: var(--caption-font-size);
    font-style: var(--caption-font-style);
    font-weight: var(--caption-font-weight);
}
#+END_SRC

#+BEGIN_SRC css
pre.example {
    margin-top: var(--text-tiny);
    padding: var(--text-normal);
    background-color: var(--code-background-color);
    border: var(--border-width) var(--border-style) var(--code-border-color);
    border-radius: var(--border-radius-small);
    overflow-x: hidden;
}
pre.example:hover {
    filter: brightness(var(--code-hover-brightness));
}
#+END_SRC

#+BEGIN_SRC css
@media print {
    pre, code {
        color: var(--print-code-color);
    }
    div.org-src-container > pre.src {
        background-color: var(--print-code-background-color);
    }       
    p code, li code, dt code, dd code {
        background-color: var(--print-code-background-color);
    }  
    pre.example {
        background-color: var(--print-code-background-color);
    }   
}
#+END_SRC

** Math (KaTeX)

#+BEGIN_SRC css
:root {
    --math-color: var(--text-color);
    --math-font-size: 1.1em;
}
#+END_SRC

The /math font size/ is a specific value, not one of those defined in [[sec:relative-sizes]], as it is very dependent on the math renderer
(MathJax for example really needs a size less than =1.0em=) and some fine tuning as math fonts tend to have rounder
characters and so bringing the vertical heights close results in wide looking text.

The math color should match the body text color, by default it's black and tends to jump out,m especially as the weight
of the math font tends to be heavier.

#+BEGIN_SRC css
.katex {
    color: var(--math-color);
    font-size: var(--math-font-size);
}
#+END_SRC

Treat tags on equations in the same manner as captions.

#+BEGIN_SRC css
.katex .tag {
    font-size: var(--caption-font-size);
    font-style: var(--caption-font-style);
    font-weight: var(--caption-font-weight);
}
#+END_SRC

** Home and Up

#+BEGIN_SRC css
div#org-div-home-and-up {
    text-align: right;
    font-size: var(--text-smaller);
    white-space: nowrap;
}
#+END_SRC

** Footnotes and References

#+CAPTION: Generated Footnote section
#+BEGIN_SRC html :tangle no
<div id="footnotes">
  <h2 class="footnotes">Footnotes: </h2>
  <div id="text-footnotes">
    <div class="footdef">
      <sup>
        <a id="fn.1" class="footnum" href="#fnr.1" role="doc-backlink">1</a>
      </sup>
      <div class="footpara" role="doc-footnote">
        <p class="footpara">
          Some text
        </p>
      </div>
    </div>
  </div>
</div>
#+END_SRC

#+CAPTION: Generated Footnote reference
#+BEGIN_SRC html :tangle no
<sup>
  <a id="fnr.1" class="footref" href="#fn.1" role="doc-backlink">1</a>
</sup>
#+END_SRC

#+BEGIN_SRC css
div#footnotes {
    border-top: var(--section-border);
    font-size: var(--text-small);
}
div#footnotes > div#text-footnotes div.footdef {
    display: grid;
    grid-template-columns: max-content auto;
    gap: var(--dl-padding-normal);
}
div#footnotes > div#text-footnotes div.footdef > sup {
    grid-column-start: 1;
    width: var(--text-larger);
}
div#footnotes > div#text-footnotes div.footdef > div.footpara {
    grid-column-start: 2;
    margin: 0;
}
div#footnotes > div#text-footnotes div.footdef > div.footpara p.footpara {
    margin: 0;
}
#+END_SRC

Here we want to style the footnote reference, but want to add the "[" and "]" /around/ the src_html[:exports code]{<a>}
and not a part of the clickable link. So, we want to style the parent src_html[:exports code]{<sup>} element and have to
use the CSS src_css[:exports code]{:has()} selector.

#+BEGIN_SRC css
sup:has(a.footref)::before {
    content: "[";
}
sup:has(a.footref)::after {
    content: "]";
}
#+END_SRC

** Postamble

#+BEGIN_SRC css
div#postamble {
    border-top: var(--section-border);
    margin-top: var(--text-larger);
    padding-top: var(--text-normal);
    font-weight: var(--text-weight-light);
    font-size: var(--text-small);
}
div#postamble > p {
    line-height: var(--line-height-compressed);
    margin-top: var(--text-tiny);
    margin-bottom: 0;
}

div#postamble > p.validation {
    display: none;
}
#+END_SRC

#+BEGIN_SRC css
#+END_SRC

* Javascript
:PROPERTIES:
:header-args: :tangle office.mjs
:END:

#+BEGIN_SRC js
"use strict";
#+END_SRC

** Math (KaTeX)

This allows you to add your own macros in the constant src_js[:exports code]{KATEX_MACROS}.

#+BEGIN_SRC js
import renderMathInElement from 'https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.mjs';

export function initMath(options) {
    const KATEX_MACROS = document.KATEX_MACROS || {};
    document.addEventListener("DOMContentLoaded", function() {
        renderMathInElement(document.body, {
            macros: KATEX_MACROS
        });
    });
}
#+END_SRC

#+BEGIN_SRC js
export default function init(options) {
    initMath(options);
}
#+END_SRC

* Setup File
:PROPERTIES:
:header-args: :tangle office.setup
:END:

This section creates the actual setup files used in document headers. This is easily referenced in an org-mode document
in the following manner.

#+BEGIN_EXAMPLE org
,#+TITLE: Fancy Document
,#+AUTHOR: Good Writer
,#+EMAIL: writes-good@example.com
,#+STARTUP: overview hidestars inlineimages entitiespretty
,#+SETUPFILE: https://simonkjohnston.life/org-export-themes/html/office/office.setup
#+END_EXAMPLE

#+NAME: tbl:html-settings
| Name        | Purpose                                                  |
|-------------+----------------------------------------------------------|
| DOCTYPE     | Set to =xhtml5= which works best with KaTeX.               |
| html-style  | Stops org-export adding the default style into the page. |
| html5-fancy | Turns on more modern structures.                         |
| toc         | Turn off TOC, this can be turned on again by the client. |
| author      | Add author name to postamble.                            |
| email       | Add author email to postamble.                           |

KaTeX requires the use of the HTML5 doctype; without it, KaTeX may not render properly. The loading of KaTeX is deferred
to speed up page rendering, and to automatically render math in text elements, include the auto-render extension.

#+BEGIN_SRC org :noweb yes
# -*- mode: org; -*-

,#+HTML_DOCTYPE: xhtml5
,#+OPTIONS: html-style:nil html5-fancy:t
,#+OPTIONS: toc:nil author:t email:t

,#+HTML_HEAD: <script nomodule
,#+HTML_HEAD:         defer
,#+HTML_HEAD:         src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.js"
,#+HTML_HEAD:         integrity="sha384-ImWHyYvDPlRzwFnvLhG9Jcpm/7qL4SVIuJK0C6Rj+Mf7fpeNJCLCynC+EVz4kCSA"
,#+HTML_HEAD:         crossorigin="anonymous"></script>
,#+HTML_HEAD: <script nomodule
,#+HTML_HEAD:         defer
,#+HTML_HEAD:         src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js"
,#+HTML_HEAD:         integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05"
,#+HTML_HEAD:         crossorigin="anonymous"></script>
,#+HTML_HEAD: <link rel="stylesheet"
,#+HTML_HEAD:       href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css"
,#+HTML_HEAD:       integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV"
,#+HTML_HEAD:       crossorigin="anonymous">
,#+HTML_HEAD: 
,#+HTML_HEAD: <link rel="stylesheet"
,#+HTML_HEAD:       href="https://simonkjohnston.life/org-export-themes/html/office/office.css">
,#+HTML_HEAD: <script type="module" type="text/javascript">
,#+HTML_HEAD:     import init from 'https://simonkjohnston.life/org-export-themes/html/office/office.mjs';
,#+HTML_HEAD:     init();
,#+HTML_HEAD: </script>
#+END_SRC

** Local Install
:PROPERTIES:
:header-args: :tangle office-local.setup
:END:

This setup file assumes that all the resources required for your page are local to some web application. This assumes
that static resources such as javascript, css, or fonts, are in the path starting with =/static/=, with KaTeX installed in
=/static/katex= and the export templates in =/static/html=.

#+BEGIN_SRC org :noweb yes
# -*- mode: org; -*-

,#+HTML_DOCTYPE: xhtml5
,#+OPTIONS: html-style:nil html5-fancy:t
,#+OPTIONS: toc:nil author:t email:t

,#+HTML_HEAD: <script nomodule
,#+HTML_HEAD:         defer
,#+HTML_HEAD:         src="/static/katex/katex.js"
,#+HTML_HEAD:         crossorigin="anonymous"></script>
,#+HTML_HEAD: <script nomodule
,#+HTML_HEAD:         defer
,#+HTML_HEAD:         src="/static/katex/contrib/auto-render.min.js"
,#+HTML_HEAD:         crossorigin="anonymous"></script>
,#+HTML_HEAD: <link rel="stylesheet"
,#+HTML_HEAD:       href="/static/katex/katex.min.css"
,#+HTML_HEAD:       crossorigin="anonymous">
,#+HTML_HEAD: 
,#+HTML_HEAD: <link rel="stylesheet" href="/static/html/office/office.css">
,#+HTML_HEAD: <script type="module" type="text/javascript">
,#+HTML_HEAD:     import init from '/static/html/office/office.mjs';
,#+HTML_HEAD:     init();
,#+HTML_HEAD: </script>
#+END_SRC
